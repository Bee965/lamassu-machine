#!/usr/bin/env node

'use strict';

// TODO: go through code and take out all evil throws

var fs = require('fs');
var path = require('path');

var minimist = require('minimist');
var _ = require('lodash');

var Brain = require('../lib/brain');

var SOFTWARE_CONFIG = require('../software_config.json');
var DEVICE_CONFIG = require('../device_config.json');
var LICENSES = require('../licenses.json');

require('../logging');

var bailed = false;

function bail(err) {
  if (bailed) return;
  bailed = true;
  console.log('brain-child bailing out momentarily...');
  console.log(err);
  if (err.stack) console.log(err.stack);
  setTimeout(function () {
    console.log('brain-child bailing out');
    process.exit(10);
    process.abort();  // Make sure we're dead
  }, 7000);   // Leave some time to connect for browser to set error screen
}

function loadConfig() {
  var config = SOFTWARE_CONFIG;
  var commandLine = minimist(process.argv.slice(2));

  _.merge(config, DEVICE_CONFIG);
  _.merge(config, commandLine);
  _.merge(config, LICENSES);
  delete config._;

  if (config.mockBv) config.id003.rs232.device = config.mockBv;


  return config;
}

function startBrain() {
  var config = loadConfig();
  if (config.mockCam) {
    var fakeLicense = fs.readFileSync(path.join(__dirname,
        '../mock_data/compliance/license.jpg'));
    var pdf417Data = fs.readFileSync(path.join(__dirname,
        '../mock_data/compliance/nh.dat'));
    var mockCamConfig = {
      pairingData: config.mockPair,
      qrData: config.brain.mockQR || config.mockBTC,
      pdf417Data: pdf417Data,
      fakeLicense: fakeLicense
    };
    config.scanner = {
      mock: {
        data: mockCamConfig
      }
    };
  }

  var brain = new Brain(config);
  brain.on('error', bail);
  brain.run();
}

process.on('uncaughtException', bail);
process.on('exit', function() { console.log('brain-child exiting'); });

startBrain();
