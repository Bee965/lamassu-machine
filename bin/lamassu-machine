#!/usr/bin/env node

'use strict';

var cp = require('child_process');
var path = require('path');
require('../logging');

var childPath = path.resolve(__dirname, './brain-child');

var TIMEOUT = 20000;

var lastHeartbeat = Date.now();
var child = null;
var killVerifyLauncher = null;

function errorHandler(err) {
  console.log('lamassu-machine: child process error');
  console.log(err.stack);
}

function exitHandler() {
  child = null;
  if (killVerifyLauncher) {
    clearTimeout(killVerifyLauncher);
    killVerifyLauncher = null;
  }
  console.log('lamassu-machine: child process exited, relaunching in 10s...');
  setTimeout(launchChild, 10000);
}

function launchChild() {
  if (child !== null) return;
  lastHeartbeat = Date.now();
  child = cp.fork(childPath, process.argv);

  child.on('message', function (msg) {
    if (msg.heartbeat) lastHeartbeat = Date.now();
  });
  child.on('error', errorHandler);
  child.on('exit', exitHandler);
}

function verifyKill() {
  if (!child) return;
  console.log('Child not responding, attempting to kill...');
  child.kill();
  setTimeout(function () {
    if (!killVerifyLauncher || !child) return;
    console.log('Child did not exit, attempting to kill with SIGINT');
    child.kill('SIGINT');
  }, 5000);
  setTimeout(function () {
    if (!killVerifyLauncher || !child) return;
    console.log('Child did not exit, attempting to kill with SIGKILL');
    child.kill('SIGKILL');
  }, 10000);
}

function checkHeartbeat() {
  if (!child || killVerifyLauncher) return;
  if (Date.now() - lastHeartbeat > TIMEOUT) {
    console.log('lamassu-machine: lost heartbeat, disconnecting child process...');
    if (child.connected) child.disconnect();
    killVerifyLauncher = setTimeout(verifyKill, 10000);
  }
}

launchChild();
setInterval(checkHeartbeat, 2000);

